spring:
  application:
    name: first-backend
  data:
    jdbc:
      dialect: postgresql
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    driverClassName: org.postgresql.Driver
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  security:
    oauth2:
      client:
        registration:
          # This ID must match the Client ID you created in Keycloak
          keycloak-client:
            client-id: ${KEYCLOAK_CLIENT_ID}
            # This must be the client secret from Keycloak.
            # For a "public" client, you might not have one, so you can omit this.
            client-secret: ${KEYCLOAK_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: openid, profile, email
        provider:
          # This ID must match the registration ID above
          keycloak-client:
            issuer-uri: http://keycloak:8080/realms/${KEYCLOAK_REALM}
            user-name-attribute: preferred_username
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/${KEYCLOAK_REALM}

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER_URL}

logging:
  level:
    org:
      springframework:
        security: INFO
server:
  port: 8080